generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["linux-musl-arm64-openssl-1.1.x", "debian-openssl-3.0.x", "darwin-arm64", "windows"]
}

datasource db {
  provider   = "postgres"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

enum user_status {
  ACTIVE
  INACTIVE
  PENDENT
}

enum user_role {
  ADMIN
  GUEST
  HOST
}

enum property_type {
  HOUSING
  EVENTS
  SPORTS
}

enum property_status {
  AVAILABLE
  UNAVAILABLE
}

enum reservation_status {
  PENDING
  CONFIRMED
  CANCELED
}

enum event_type {
  CHECKIN
  CHECKOUT
}

enum event_status {
  PENDING
  COMPLETED
  CANCELED
}

enum review_type {
  GUEST_TO_HOST
  HOST_TO_GUEST
}

enum transaction_type {
  GUEST_PAYMENT
  HOST_PAYOUT
}

enum invoice_status {
  PENDING
  PAID
  CANCELED
}

enum operating_mode {
  PER_NIGHT
  PER_HOUR
  PER_DAY
}

// Usuários do sistema (admins, hóspedes e anfitriões)
model app_user {
  id                String      @id @default(uuid())
  email             String      @unique
  password          String?
  name              String?
  role              user_role[] @default([GUEST])
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  status            user_status @default(ACTIVE)
  phone             String?
  contractNumber    String?     @map("contract_number")
  isHolder          Boolean     @default(false) @map("is_holder")
  cpf               String?     @unique
  birthDate         DateTime?   @map("birth_date")
  address           String?
  addressNumber     String?     @map("address_number")
  neighborhood      String?
  postalCode        String?     @map("postal_code")
  city              String?
  addressComplement String?     @map("address_complement")
  state             String?

  properties       property[]
  reservations     reservation[]
  reviews          review[]
  transactions     transaction[]

  @@index([email])
  @@index([contractNumber])
  @@index([cpf])
}

// Transações financeiras, como pagamentos de mensalidades
model transaction {
  id           String           @id @default(uuid())
  userId       String           @map("user_id")
  user         app_user         @relation(fields: [userId], references: [id])
  amount       Decimal          @db.Decimal(10, 2)
  type         transaction_type
  status       invoice_status
  createdAt    DateTime         @default(now()) @map("created_at")

  @@index([userId])
}

// Fotos das propriedades
model photo {
  id         String   @id @default(uuid())
  data       Bytes    @map("data") // Campo para armazenar a imagem como BLOB
  isCover    Boolean  @default(false)
  propertyId String   @map("property_id")
  property   property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
}

// Propriedades e Espaços disponíveis pra reserva (moradias, espaços para eventos, quadras esportivas, etc.)
model property {
  id                String               @id @default(uuid())
  title             String
  description       String
  type              property_type
  status            property_status      @default(AVAILABLE)
  street            String
  city              String
  state             String
  country           String
  zipCode           String               @map("zip_code")
  pricePerUnit      Decimal              @map("price_per_unit") @db.Decimal(10, 2)
  operatingMode     operating_mode       @map("operating_mode") 
  hostId            String               @map("host_id")
  host              app_user             @relation(fields: [hostId], references: [id])
  photos            photo[]
  reservations      reservation[]
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")

  @@index([hostId])
}

// Reservas feitas pelos hóspedes pras propriedades
model reservation {
  id         String             @id @default(uuid())
  propertyId String             @map("property_id")
  guestId    String             @map("guest_id")
  property   property           @relation(fields: [propertyId], references: [id])
  guest      app_user           @relation(fields: [guestId], references: [id])
  checkIn    DateTime           @map("check_in")
  checkOut   DateTime           @map("check_out")
  guestCount Int                @map("guest_count")
  totalPrice Decimal            @map("total_price") @db.Decimal(10, 2)
  status     reservation_status
  events     check_event[]
  reviews    review[]
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")

  @@index([propertyId])
  @@index([guestId])
}

// Eventos de check-in e check-out das reservas
model check_event {
  id            Int          @id @default(autoincrement())
  reservationId String       @map("reservation_id")
  reservation   reservation  @relation(fields: [reservationId], references: [id])
  type          event_type
  eventDate     DateTime     @map("event_date")
  status        event_status
  createdAt     DateTime     @default(now()) @map("created_at")

  @@index([reservationId])
}

// Avaliações feitas por hóspedes ou anfitriões
model review {
  id            Int         @id @default(autoincrement())
  reservationId String      @map("reservation_id")
  reservation   reservation @relation(fields: [reservationId], references: [id])
  authorId      String      @map("author_id")
  author        app_user    @relation(fields: [authorId], references: [id])
  rating        Int
  comment       String
  type          review_type
  createdAt     DateTime    @default(now()) @map("created_at")

  @@index([reservationId])
  @@index([authorId])
}
